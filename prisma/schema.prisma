datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

model User {
  id      Int      @id @default(autoincrement())
  name    String?
  bio     String?
  email   String?  @unique
  github  String?  @unique
  twitter String?  @unique
  npub    String?  @unique
  discord String?  @unique
  lud06   String?
  lud16   LNURL?
  lnbits  LNBits?
  relays  Relay[]
  cards   Card[]
  wallet  Wallet?
  otToken OTToken?
}

model LNBits {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
  lndhubUrl String?
  adminKey  String
}

model LNURL {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id])
  tag            String
  callback       String?
  minSendable    Int
  maxSendable    Int
  metadata       String
  commentAllowed Int
  payerData      String?
}

model Relay {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model OTToken {
  id         Int      @id @default(autoincrement())
  validUntil DateTime
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
}

model Card {
  id     Int        @id @default(autoincrement())
  // status String
  status CardStatus
  userId Int?
  user   User?      @relation(fields: [userId], references: [id])
  wallet Wallet?
  uuid   String     @unique
  k01    String?
  k02    String?
  k03    String?
  k04    String?
}

model Wallet {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  cardId Int?   @unique
  user   User?  @relation(fields: [userId], references: [id])
  card   Card?  @relation(fields: [cardId], references: [id])
  uuid   String @unique
}

enum CardStatus {
  BLANK // Recently created
  WRITTEN // Physical card written with values
  QR_ASSIGNED // Assigned with QR code
  READY // Assigned to user
  LOST // Lost
  WIPED // Wiped
}
